SOLUTION 1 : 
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* mergeKLists(vector<ListNode*>& lists) {
        vector<int> listVal;
        for(auto list : lists){
            ListNode* temp = list;
            while(temp!=NULL){
                listVal.push_back(temp->val);
                temp=temp->next;
            }
        }
        sort(listVal.begin(),listVal.end());
        ListNode* head = new ListNode(0);
        ListNode* curr = head;
        for(auto i : listVal){
            ListNode* ptr = new ListNode(i);
            curr->next=ptr;
            curr=curr->next;
        }
        return head->next;

    }
};

SOLUTION 2 :
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* merge(ListNode* l1, ListNode* l2){
        ListNode* head = new ListNode(0);
        ListNode* curr = head;
        while(l1!=NULL&&l2!=NULL){
            if(l1->val<l2->val){
                curr->next = l1;
                l1=l1->next;
            }
            else{
                curr->next = l2;
                l2=l2->next;
            }
            curr=curr->next;
        }
        while(l1!=NULL){
            curr->next=l1;
            l1=l1->next;
            curr=curr->next;
        }
        while(l2!=NULL){
            curr->next=l2;
            l2=l2->next;
            curr=curr->next;
        }
        return head->next;

    }
    ListNode* mergeKLists(vector<ListNode*>& lists) {
        ListNode* head = NULL;
        for(auto list : lists){
            head = merge(head,list);
        }
        return head;
    }
};
